~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TO DO

[ ] demonizar la vaca
[x] autoarranque en todo el bloom
[x] montar cherrypy
[x] crontab q actualiza ichigo con datos de plankton1
[x] pasar wally a int
[x] prioridad de semilas por f_nrg
[ ] mejorar el filtro para no mandar nada vacÃ­o
[ ] volver a multiprocessing?
[ ] systemd con user
[ ] http://stackoverflow.com/questions/11532654/python-multiprocessing-remotemanager-under-a-multiprocessing-process

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# meteo
sol
lluvia
pool

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# plancton
0   p_gen       generacion          int             p_gen = 1.0         1
1   p_start     start_tick          int             p_start = 0.0       0
2   p_nrg       energy              int/1000        p_nrg = 1.000       1000
# especie
3   f_gen       generacion          int             f_gen = 0.0         0
4   f_max       f_edad_max          int/10          f_max = 10.0        100/10
5   f_num       f_sem_num           int/10          f_num = 2.0         20/10
6   f_nrg       energy start        int/1000        f_nrg = 1.000       1000/1000
7   f_sex       minimum sex nrg     int/1000        f_sex = 3.000       3000/1000
8   f_luz       luz_aprov           int/100         f_luz = 0.5         50/100
9   f_agua      agua_aprov          int/100         f_agua = 0.5        50/100
10  f_pool      pool_aprov          int/100         f_pool = 0.5        50/100
11  f_meta      metab_req           int/1000        f_meta = 3.000      3000/1000

p_id,p_gen,p_start,p_nrg,f_id,f_gen,f_start,f_max,f_num,f_nrg,f_sex,f_luz,f_agua,f_pool,f_meta

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

import builder
b = builder.Builder(100)

import kami
k = kami.Kami(n_plankton=4)
for i in xrange(10):
    k.checkpoint()
    for ii in xrange(10):
        k.loop()


#k.checkpoint()
k.close()
k.close(cp=True)


import plankton
p = plankton.Plankton(port=10001)
p.boot()
while True:
    p.loop()


import plankton
p = plankton.Plankton(port=10002)
p.boot()
while True:
    p.loop()


import plankton
p = plankton.Plankton(port=10003)
p.boot()
while True:
    p.loop()


import plankton
p = plankton.Plankton(port=10004)
p.boot()
while True:
    p.loop()


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#import numpy
import database
import utils
db = database.Database()
conn = database.Connector(db)
conn.root.keys()
conn.root['conf']
s = conn.root['conf']['size']

w = conn.root['wally']
d = utils.darwinize(w)
m = conn.root['meteo']
n = conn.root['nada']
r = conn.root['rookies']

utils.pygal_from_darwin('cacota',d,w)

#numpy.array([len(w[w[i,j,:,0] != 0]) for i in xrange(s) for j in xrange(s)]).reshape(s,s)

len(d.keys())
d.most_common(5)
sum([d[i] for i in d])
sorted([d[i] for i in d], reverse=True)[:10] # top ten

[(x,y) for x in xrange(10) for y in xrange(10) for z in xrange(10) if list(w[x,y,z,3:])==list(d.keys()[0])]


# METEO


conn.close()
db.close()

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import database
db=database.Database()
db.do_pack()
db.close()

500 turnos (25x25)
    1 mensaca   53.211 seconds
    2 mensaca   36.625 seconds
    3 mensaca   30.279 seconds
    4 mensaca   27.406 seconds
    5 mensaca   26.778 seconds
    6 mensaca   26.824 seconds
    7 mensaca   28.321 seconds
    8 mensaca   28.066 seconds
    16 mensaca  27.646 seconds

500 turnos (50x50)
    3 mensaca   122.287 seconds
    4 mensaca   115.787 seconds
    5 mensaca   110.799 seconds
    8 mensaca   109.418 seconds
    16 mensaca  109.147 seconds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>>> a
array([[ 4,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9,  0, 11],
       [ 0,  0,  0,  0],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])
>>> (a != 0)
array([[ True,  True,  True,  True],
       [ True,  True,  True,  True],
       [ True,  True, False,  True],
       [False, False, False, False],
       [ True,  True,  True,  True],
       [ True,  True,  True,  True]], dtype=bool)

>>> a[a.all(1)]
array([[ 4,  1,  2,  3],
       [ 4,  5,  6,  7],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])

>>> a[a[:,0]!=0]
array([[ 4,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9,  0, 11],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])

>>> numpy.vstack([a[a[:,0]!=0], numpy.zeros((1,4))])
array([[  4.,   1.,   2.,   3.],
       [  4.,   5.,   6.,   7.],
       [  8.,   9.,   0.,  11.],
       [ 16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.],
       [  0.,   0.,   0.,   0.]])

>>> numpy.vstack([a[a[:,0]!=0], numpy.zeros((len(a)-len(a[a[:,0]!=0]),4))])
array([[  4.,   5.,   6.,   7.],
       [  8.,   9.,  10.,  11.],
       [ 16.,  17.,  18.,  19.],
       [ 20.,  21.,  22.,  23.],
       [  0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0.]])

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>>> a
array([[[[ 5,  6,  7,  8],
         [ 4,  5,  6,  7],
         [ 0,  9, 10, 11]],

        [[ 5,  6,  7,  8],
         [16, 17, 18, 19],
         [ 0, 21, 22, 23]]],


       [[[ 5,  6,  7,  8],
         [ 0,  0,  0,  0],
         [ 5,  6,  7,  8]],

        [[ 5,  6,  7,  8],
         [ 0, 41, 42, 43],
         [ 0, 45, 46, 47]]]])

>>> a.shape
(2, 2, 3, 4)


b = numpy.array([a[i,j,k,1:] \
        for i in xrange(a.shape[0]) \
        for j in xrange(a.shape[1]) \
        for k in xrange(a.shape[2]) \
        if a[i,j,k,0]])

>>> b
array([[ 6,  7,  8],
       [ 5,  6,  7],
       [ 6,  7,  8],
       [17, 18, 19],
       [ 6,  7,  8],
       [ 6,  7,  8],
       [ 6,  7,  8]])

>>> from collections import Counter
>>> c = Counter([(i[0], i[1], i[2]) for i in b])
>>> c
Counter({(6, 7, 8): 5, (5, 6, 7): 1, (17, 18, 19): 1})
>>>




